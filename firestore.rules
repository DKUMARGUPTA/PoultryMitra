
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if a user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if a user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if a user is a dealer connected to a farmer
    function isDealerOf(farmerId) {
        let farmer = get(/databases/$(database)/documents/farmers/$(farmerId)).data;
        return request.auth.uid == farmer.dealerId;
    }

    // Users can read their own profile, admins can read any.
    // Users can only update their own profile.
    match /users/{userId} {
      allow read: if isAdmin() || isOwner(userId);
      allow create, update: if isOwner(userId);
    }

    // Farmers: Only the owner or their dealer can access. Admins can access all.
    match /farmers/{farmerId} {
        allow read, write: if isAdmin() || isOwner(farmerId) || isDealerOf(farmerId);
    }

    // Batches: Only the owner (farmer) or their dealer can access. Admins can access all.
    match /batches/{batchId} {
        let farmerId = get(/databases/$(database)/documents/batches/$(batchId)).data.farmerId;
        allow read, write, delete: if isAdmin() || isOwner(farmerId) || isDealerOf(farmerId);
    }

    // Daily-entries: Inherit permissions from the parent batch
    match /daily-entries/{entryId} {
        let batchId = get(/databases/$(database)/documents/daily-entries/$(entryId)).data.batchId;
        let farmerId = get(/databases/$(database)/documents/batches/$(batchId)).data.farmerId;
        allow read, write, delete: if isAdmin() || isOwner(farmerId) || isDealerOf(farmerId);
    }

    // Transactions: A user can read/create their own. A dealer can read/create for their farmers. Admins can access all.
    match /transactions/{transactionId} {
        allow read, create, delete: if isAdmin() || isOwner(request.resource.data.userId) || isDealerOf(request.resource.data.userId);
        allow update: if false; // Transactions should be immutable
    }
    
    // Inventory: Only the owner (dealer) or admin can manage.
    match /inventory/{itemId} {
        allow read, write: if isAdmin() || isOwner(resource.data.ownerId);
    }
    
    // Purchase Orders: Only the owner (dealer) or admin can manage.
    match /purchaseOrders/{orderId} {
        allow read, write: if isAdmin() || isOwner(resource.data.ownerId);
    }

    // Orders: Farmer and Dealer involved can read. Farmer can create. Dealer can update.
    match /orders/{orderId} {
        allow read: if isAdmin() || isOwner(resource.data.farmerId) || isOwner(resource.data.dealerId);
        allow create: if isOwner(request.resource.data.farmerId);
        allow update, delete: if isOwner(resource.data.dealerId);
    }

    // Posts: Public can read published posts. Only admins can create/update/delete.
    match /posts/{postId} {
      allow read: if resource.data.isPublished == true;
      allow write: if isAdmin();
    }
    
    // Market Rates: Public can read. Admins and authorized dealers can write.
    match /market-rates/{rateId} {
        allow read: if true;
        allow write: if isAdmin() || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.ratePermissions.size() > 0;
    }

    // App Settings (like subscription prices): Only admins can read/write.
    match /appSettings/{settingId} {
        allow read, write: if isAdmin();
    }

    // All other collections are locked down by default.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
